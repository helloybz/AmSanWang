{"version":3,"sources":["components/AnswerBoxWrapper/AnswerBoxWrapper.js","components/FormulaWrapper/FormulaWrapper.js","generator.js","App.js","validator.js","reportWebVitals.js","index.js"],"names":["AnswerBoxWrapper","answer","onAnswerChange","onSubmit","Grid","container","className","item","xs","Input","autoFocus","value","onChange","e","target","Button","onClick","FormulaWrapper","formula","expression","generateRandomFormula","operand1","generateRandomNumber","operand2","Math","random","digit","floor","App","useState","setFormula","setAnswer","isNaN","length","trim","slice","replace","split","operator","parseInt","alert","validateAnswer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAqBeA,MAjBf,YAAiE,IAArCC,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,SAChD,OACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,mBAA1B,SACI,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,UACI,cAACC,EAAA,EAAD,CACIC,WAAW,EACXC,MAAOV,EACPW,SAAU,SAACC,GAAQX,EAAeW,EAAEC,OAAOH,UAE/C,cAACI,EAAA,EAAD,CAAQC,QAAS,WAAQb,KAAzB,0B,MCQDc,MAjBf,YAAsC,IAAZC,EAAW,EAAXA,QAElBC,EAAa,GAMjB,OAJIA,EADY,KAAZD,EACa,0CAEAA,EAGb,cAACd,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,iBAA1B,SACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACKW,OCfV,SAASC,IACZ,IAAIC,EAAWC,EAAqB,GAChCC,EAAWD,EAAqB,GAGpC,OAAOD,GAQHG,KAAKC,UAAY,GACV,IAEA,KAXkBF,EAGjC,SAASD,EAAqBI,GAC1B,OAAOF,KAAKG,MAAMH,KAAKC,SAALD,KAAA,IAAiB,GAAME,IC2C9BE,MA1Cf,WACE,MAA8BC,mBAAST,KAAvC,mBAAOF,EAAP,KAAgBY,EAAhB,KACA,EAA4BD,mBAAS,IAArC,mBAAO5B,EAAP,KAAe8B,EAAf,KAsBA,OACE,eAAC3B,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,OAA1B,UACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CACEU,QAASA,MAGb,cAACd,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAf,SACE,cAAC,EAAD,CACEP,OAAQA,EACRC,eA9Be,SAACS,GACjBqB,MAAMrB,EAAMA,EAAMsB,OAAS,IAG9BF,EADmB,MAAVpB,EACCA,EAAMuB,OAGNvB,EAAMwB,MAAM,EAAGxB,EAAMsB,OAAS,GAAGC,QAL3CH,EAAUpB,EAAMuB,SA6BZ/B,SApBS,YCzBZ,SAAwBe,EAASjB,GAIpC,OAFAiB,GADAA,EAAUA,EAAQkB,QAAQ,IAAK,QACbA,QAAQ,IAAK,QAEgBC,MAAM,KAArD,mBAAOhB,EAAP,KAAiBiB,EAAjB,KAA2Bf,EAA3B,KACA,MAAiB,MAAbe,EACQC,SAASlB,GAAYkB,SAAShB,KAAegB,SAAStC,GAC1C,MAAbqC,EACCC,SAASlB,GAAYkB,SAAShB,KAAegB,SAAStC,QAE9DuC,MAAM,SDgBNC,CAAevB,EAASjB,IAC1B6B,EAAWV,KAGXW,EAAU,aElBDW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d2033430.chunk.js","sourcesContent":["import { Button, Grid, Input } from \"@mui/material\";\n\nimport \"./AnswerBoxWrapper.css\"\n\nfunction AnswerBoxWrapper({ answer, onAnswerChange, onSubmit }) {\n    return (\n        <Grid container className=\"AnswerBoxWrapper\">\n            <Grid item xs={12}>\n                <Input\n                    autoFocus={true}\n                    value={answer}\n                    onChange={(e) => { onAnswerChange(e.target.value) }}\n                />\n                <Button onClick={() => { onSubmit() }}>\n                    Submit\n                </Button>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default AnswerBoxWrapper;","import { Grid } from \"@mui/material\";\n\nimport \"./FormulaWrapper.css\"\n\nfunction FormulaWrapper({ formula }) {\n\n    var expression = \"\"\n    if (formula === \"\") {\n        expression = <div>Spinner</div>\n    } else {\n        expression = formula\n    }\n    return (\n        <Grid container className=\"FormulaWrapper\">\n            <Grid item xs={12}>\n                {expression}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default FormulaWrapper;","export function generateRandomFormula() {\n    var operand1 = generateRandomNumber(2)\n    var operand2 = generateRandomNumber(2)\n    var operator = generateRandomOperator()\n\n    return operand1 + operator + operand2;\n}\n\nfunction generateRandomNumber(digit) {\n    return Math.floor(Math.random() * (10 ** digit))\n}\n\nfunction generateRandomOperator() {\n    if (Math.random() >= 0.5) {\n        return \"+\"\n    } else {\n        return \"-\"\n    }\n}","\nimport { useState } from \"react\";\nimport { Grid } from \"@mui/material\";\n\nimport { AnswerBoxWrapper, FormulaWrapper } from \"./components\";\n\nimport { generateRandomFormula } from \"./generator\";\nimport { validateAnswer } from \"./validator\";\n\n\nfunction App() {\n  const [formula, setFormula] = useState(generateRandomFormula())\n  const [answer, setAnswer] = useState(\"\")\n\n  const onAnswerChange = (value) => {\n    if (!isNaN(value[value.length - 1])) {\n      setAnswer(value.trim())\n    } else if (value === \"-\") {\n      setAnswer(value.trim())\n    }\n    else {\n      setAnswer(value.slice(0, value.length - 1).trim())\n    }\n  }\n\n  const onSubmit = () => {\n    if (validateAnswer(formula, answer)) {\n      setFormula(generateRandomFormula())\n      setAnswer(\"\")\n    } else {\n      setAnswer(\"\")\n    }\n  }\n\n  return (\n    <Grid container className=\"Body\">\n      <Grid item xs={12}>\n        <FormulaWrapper\n          formula={formula}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <AnswerBoxWrapper\n          answer={answer}\n          onAnswerChange={onAnswerChange}\n          onSubmit={onSubmit}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","export function validateAnswer(formula, answer) {\n    formula = formula.replace(\"+\", \" + \");\n    formula = formula.replace(\"-\", \" - \");\n\n    const [operand1, operator, operand2] = formula.split(\" \")\n    if (operator === \"+\") {\n        return (parseInt(operand1) + parseInt(operand2)) === parseInt(answer)\n    } else if (operator === \"-\") {\n        return (parseInt(operand1) - parseInt(operand2)) === parseInt(answer)\n    } else {\n        alert('Error')\n    }\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}